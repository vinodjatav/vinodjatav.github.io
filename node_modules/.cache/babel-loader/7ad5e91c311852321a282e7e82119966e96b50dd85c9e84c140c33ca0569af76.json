{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst useOnScreen = ref => {\n  _s();\n  const [isIntersecting, setIntersecting] = useState(false);\n  const observer = new IntersectionObserver(([entry]) => setIntersecting(entry.isIntersecting));\n  useEffect(() => {\n    observer.observe(ref.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n  return isIntersecting;\n};\n_s(useOnScreen, \"+TWZGT8mxcpNH+JS7IkSFv1hR0A=\");\nexport default useOnScreen;","map":{"version":3,"names":["useEffect","useState","useOnScreen","ref","_s","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","observe","current","disconnect"],"sources":["/Users/vinodjatav/Desktop/Developement/vinodjatav.github.io/src/Components/RightPannel/Projects/ProjectDetailPage/UseOnScreenHook.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\n\nconst useOnScreen = (ref: React.MutableRefObject<any>) => {\n  const [isIntersecting, setIntersecting] = useState(false)\n\n  const observer = new IntersectionObserver(\n    ([entry]) => setIntersecting(entry.isIntersecting)\n  )\n\n  useEffect(() => {\n    observer.observe(ref.current)\n    return () => {\n      observer.disconnect()\n    }\n  }, [])\n\n  return isIntersecting\n}\n\nexport default useOnScreen;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,WAAW,GAAIC,GAAgC,IAAK;EAAAC,EAAA;EACxD,MAAM,CAACC,cAAc,EAAEC,eAAe,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMM,QAAQ,GAAG,IAAIC,oBAAoB,CACvC,CAAC,CAACC,KAAK,CAAC,KAAKH,eAAe,CAACG,KAAK,CAACJ,cAAc,CACnD,CAAC;EAEDL,SAAS,CAAC,MAAM;IACdO,QAAQ,CAACG,OAAO,CAACP,GAAG,CAACQ,OAAO,CAAC;IAC7B,OAAO,MAAM;MACXJ,QAAQ,CAACK,UAAU,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOP,cAAc;AACvB,CAAC;AAAAD,EAAA,CAfKF,WAAW;AAiBjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}