{"ast":null,"code":"import{useEffect,useState}from\"react\";const useOnScreen=ref=>{const[isIntersecting,setIntersecting]=useState(false);const observer=new IntersectionObserver(_ref=>{let[entry]=_ref;return setIntersecting(entry.isIntersecting);});useEffect(()=>{observer.observe(ref.current);return()=>{observer.disconnect();};},[]);return isIntersecting;};export default useOnScreen;","map":{"version":3,"names":["useEffect","useState","useOnScreen","ref","isIntersecting","setIntersecting","observer","IntersectionObserver","_ref","entry","observe","current","disconnect"],"sources":["/Users/vinodjatav/Desktop/Developement/vinodjatav.github.io/src/Components/RightPannel/Projects/ProjectDetailPage/UseOnScreenHook.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\n\nconst useOnScreen = (ref: React.MutableRefObject<any>) => {\n  const [isIntersecting, setIntersecting] = useState(false)\n\n  const observer = new IntersectionObserver(\n    ([entry]) => setIntersecting(entry.isIntersecting)\n  )\n\n  useEffect(() => {\n    observer.observe(ref.current)\n    return () => {\n      observer.disconnect()\n    }\n  }, [])\n\n  return isIntersecting\n}\n\nexport default useOnScreen;"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,KAAM,CAAAC,WAAW,CAAIC,GAAgC,EAAK,CACxD,KAAM,CAACC,cAAc,CAAEC,eAAe,CAAC,CAAGJ,QAAQ,CAAC,KAAK,CAAC,CAEzD,KAAM,CAAAK,QAAQ,CAAG,GAAI,CAAAC,oBAAoB,CACvCC,IAAA,MAAC,CAACC,KAAK,CAAC,CAAAD,IAAA,OAAK,CAAAH,eAAe,CAACI,KAAK,CAACL,cAAc,CAAC,EACpD,CAAC,CAEDJ,SAAS,CAAC,IAAM,CACdM,QAAQ,CAACI,OAAO,CAACP,GAAG,CAACQ,OAAO,CAAC,CAC7B,MAAO,IAAM,CACXL,QAAQ,CAACM,UAAU,CAAC,CAAC,CACvB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAR,cAAc,CACvB,CAAC,CAED,cAAe,CAAAF,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}